x-scaling:
  collectors-python: &scale-py-collectors
    scale: ${COLLECTORS_PY_SCALE:-1}
    mem_limit: "${COLLECTORS_PY_MEM_LIMIT:-512mb}"
  collectors-java-cpc: &scale-java-cpc-collectors
    scale: ${COLLECTORS_JAVA_CPC_SCALE:-1}
    mem_limit: "${COLLECTORS_JAVA_CPC_MEM_LIMIT:-1024mb}"
  extractor: &scale-extractor
    scale: ${EXTRACTOR_SCALE:-1}
    mem_limit: "${EXTRACTOR_MEM_LIMIT:-1024mb}"
  classifier: &scale-classifier
    scale: ${CLASSIFIER_SCALE:-1}
    mem_limit: "${CLASSIFIER_MEM_LIMIT:-2gb}"
  flink-taskmanager: &scale-taskmanager
    scale: ${FLINK_TASKMANAGER_SCALE:-1}
    mem_limit: "${FLINK_TASKMANAGER_CONTAINER_MEM_LIMIT:-2gb}"

x-base-service-definitions: 
  python: &python-collector
    <<: *scale-py-collectors
    restart: always
    depends_on:
      initializer:
        condition: service_completed_successfully
    networks:
      - kafka-clients
      - collectors
    env_file: 
      - ./envs/faust.env

  java-cpc: &java-cpc-collector
    <<: *scale-java-cpc-collectors
    restart: always
    image: domrad/java-standalone
    entrypoint: [ "java", "-Dlog4j2.configurationFile=file:log4j2.xml", "-cp", "/app/domainradar-collector.jar", "cz.vut.fit.domainradar.standalone.StandaloneCollectorRunner" ]
    depends_on:
      initializer:
        condition: service_completed_successfully
    networks:
      - kafka-clients
      - collectors
   
services:

  # --- General infrastructure --- #

  kafka1:
    image: docker.io/apache/kafka:3.8.1
    mem_limit: "${KAFKA_MEM_LIMIT:-2gb}"
    hostname: kafka1
    volumes:
      - kafka1-single-log:/var/lib/kafka/data
    secrets:
      - kafka-truststore
      - kafka1-keystore
    networks:
      kafka-clients:
        ipv4_address: 192.168.100.2
        aliases: [ "kafka1" ]
      kafka-outside-world:
        ipv4_address: 192.168.103.250
    ports:
      - "31013:31013"
    env_file:
      - ./envs/kafka1_single.env

  kafka-ui:
    image: ghcr.io/kafbat/kafka-ui:latest
    depends_on:
      - kafka1
    secrets:
      - kafka-truststore
      - kafka-ui-keystore
    networks:
      kafka-clients:
        ipv4_address: 192.168.100.11
      outside-world:
        ipv4_address: 192.168.103.11
    ports:
      - "31000:8080"
    volumes:
      - ./client_properties/kafka_ui.yml:/etc/kafkaui/dynamic_config.yaml
    environment:
      - DYNAMIC_CONFIG_ENABLED=true

  initializer:
    build:
      context: ./initializer
      dockerfile: initializer.Dockerfile
    depends_on:
      - kafka1
    secrets:
      - kafka-truststore
      - initializer-keystore
    networks:
      - kafka-clients
    volumes:
      - ./client_properties/initializer.properties:/scripts/client.properties
    environment:
      - BOOTSTRAP=${BOOTSTRAP_SERVERS:-kafka1:9093}
      - COMMAND_CONFIG_FILE=/scripts/client.properties
      - EXTRA_SLEEP=0
      - UPDATE_EXISTING_TOPICS=0

  # --- Collectors --- #

  collector-zone:
    <<: *python-collector
    image: domrad/zone
    secrets:
      - ca-cert
      - collector-cert
      - collector-key
    volumes:
      - ./client_properties/zone.toml:/app/config.toml
    
  collector-dns:
    <<: *python-collector
    image: domrad/dns
    secrets:
      - ca-cert
      - collector-cert
      - collector-key
    volumes:
      - ./client_properties/dns.toml:/app/config.toml

  collector-tls:
    <<: *java-cpc-collector
    entrypoint: [ "java", "-Djava.security.properties=/app/legacy.security", "-Dlog4j2.configurationFile=file:log4j2.xml", "-cp", "/app/domainradar-collector.jar", "cz.vut.fit.domainradar.standalone.StandaloneCollectorRunner" ]
    command: [ "--col-tls", "-id", "${ID_PREFIX-domrad}", "-p", "/app/client.properties", "-s", "${BOOTSTRAP_SERVERS:-kafka1:9093}" ]
    secrets:
      - kafka-truststore
      - collector-keystore
    volumes:
      - ./client_properties/tls.properties:/app/client.properties
      - ./client_properties/log4j2-tls.xml:/app/log4j2.xml

  collector-nerd:
    <<: *java-cpc-collector
    command: [ "--col-nerd", "-id", "${ID_PREFIX-domrad}", "-p", "/app/client.properties", "-s", "${BOOTSTRAP_SERVERS:-kafka1:9093}" ]
    secrets:
      - kafka-truststore
      - collector-keystore
    volumes:
      - ./client_properties/nerd.properties:/app/client.properties
      - ./client_properties/log4j2-nerd.xml:/app/log4j2.xml

  collector-abuseipdb:
    <<: *java-cpc-collector
    command: [ "--col-abuseipdb", "-id", "${ID_PREFIX-domrad}", "-p", "/app/client.properties", "-s", "${BOOTSTRAP_SERVERS:-kafka1:9093}" ]
    secrets:
      - kafka-truststore
      - collector-keystore
    volumes:
      - ./client_properties/abuseipdb.properties:/app/client.properties
      - ./client_properties/log4j2-abuseipdb.xml:/app/log4j2.xml

  collector-virustotal:
    <<: *java-cpc-collector
    command: [ "--col-virustotal", "-id", "${ID_PREFIX-domrad}", "-p", "/app/client.properties", "-s", "${BOOTSTRAP_SERVERS:-kafka1:9093}" ]
    secrets:
      - kafka-truststore
      - collector-keystore
    volumes:
      - ./client_properties/virustotal.properties:/app/client.properties
      - ./client_properties/log4j2-virustotal.xml:/app/log4j2.xml

  collector-hybridanalysis:
    <<: *java-cpc-collector
    command: [ "--col-hybridanalysis", "-id", "${ID_PREFIX-domrad}", "-p", "/app/client.properties", "-s", "${BOOTSTRAP_SERVERS:-kafka1:9093}" ]
    secrets:
      - kafka-truststore
      - collector-keystore
    volumes:
      - ./client_properties/hybridanalysis.properties:/app/client.properties
      - ./client_properties/log4j2-hybridanalysis.xml:/app/log4j2.xml

  collector-greynoise:
    <<: *java-cpc-collector
    command: [ "--col-greynoise", "-id", "${ID_PREFIX-domrad}", "-p", "/app/client.properties", "-s", "${BOOTSTRAP_SERVERS:-kafka1:9093}" ]
    secrets:
      - kafka-truststore
      - collector-keystore
    volumes:
      - ./client_properties/greynoise.properties:/app/client.properties
      - ./client_properties/log4j2-greynoise.xml:/app/log4j2.xml

  collector-cloudflare-radar:
    <<: *java-cpc-collector
    command: [ "--col-cloudflareradar", "-id", "${ID_PREFIX-domrad}", "-p", "/app/client.properties", "-s", "${BOOTSTRAP_SERVERS:-kafka1:9093}" ]
    secrets:
      - kafka-truststore
      - collector-keystore
    volumes:
      - ./client_properties/cloudflare_radar.properties:/app/client.properties
      - ./client_properties/log4j2-cloudflare_radar.xml:/app/log4j2.xml

  collector-opentip-kaspersky:
    <<: *java-cpc-collector
    command: [ "--col-opentipkaspersky", "-id", "${ID_PREFIX-domrad}", "-p", "/app/client.properties", "-s", "${BOOTSTRAP_SERVERS:-kafka1:9093}" ]
    secrets:
      - kafka-truststore
      - collector-keystore
    volumes:
      - ./client_properties/opentip_kaspersky.properties:/app/client.properties
      - ./client_properties/log4j2-opentip_kaspersky.xml:/app/log4j2.xml

  collector-threatfox:
    <<: *java-cpc-collector
    command: [ "--col-threatfox", "-id", "${ID_PREFIX-domrad}", "-p", "/app/client.properties", "-s", "${BOOTSTRAP_SERVERS:-kafka1:9093}" ]
    secrets:
      - kafka-truststore
      - collector-keystore
    volumes:
      - ./client_properties/threatfox.properties:/app/client.properties
      - ./client_properties/log4j2-threatfox.xml:/app/log4j2.xml

  collector-criminalip:
    <<: *java-cpc-collector
    command: [ "--col-criminalip", "-id", "${ID_PREFIX-domrad}", "-p", "/app/client.properties", "-s", "${BOOTSTRAP_SERVERS:-kafka1:9093}" ]
    secrets:
      - kafka-truststore
      - collector-keystore
    volumes:
      - ./client_properties/criminalip.properties:/app/client.properties
      - ./client_properties/log4j2-criminalip.xml:/app/log4j2.xml

  collector-google-safe-browsing:
    <<: *java-cpc-collector
    command: [ "--col-googlesafebrowsing", "-id", "${ID_PREFIX-domrad}", "-p", "/app/client.properties", "-s", "${BOOTSTRAP_SERVERS:-kafka1:9093}" ]
    secrets:
      - kafka-truststore
      - collector-keystore
    volumes:
      - ./client_properties/google_safe_browsing.properties:/app/client.properties
      - ./client_properties/log4j2-google_safe_browsing.xml:/app/log4j2.xml

  collector-fortiguard:
    <<: *java-cpc-collector
    command: [ "--col-fortiguard", "-id", "${ID_PREFIX-domrad}", "-p", "/app/client.properties", "-s", "${BOOTSTRAP_SERVERS:-kafka1:9093}" ]
    secrets:
      - kafka-truststore
      - collector-keystore
    volumes:
      - ./client_properties/fortiguard.properties:/app/client.properties
      - ./client_properties/log4j2-fortiguard.xml:/app/log4j2.xml

  collector-urlvoid:
    <<: *java-cpc-collector
    command: [ "--col-urlvoid", "-id", "${ID_PREFIX-domrad}", "-p", "/app/client.properties", "-s", "${BOOTSTRAP_SERVERS:-kafka1:9093}" ]
    secrets:
      - kafka-truststore
      - collector-keystore
    volumes:
      - ./client_properties/urlvoid.properties:/app/client.properties
      - ./client_properties/log4j2-urlvoid.xml:/app/log4j2.xml

  collector-project-honeypot:
    <<: *java-cpc-collector
    command: [ "--col-projecthoneypot", "-id", "${ID_PREFIX-domrad}", "-p", "/app/client.properties", "-s", "${BOOTSTRAP_SERVERS:-kafka1:9093}" ]
    secrets:
      - kafka-truststore
      - collector-keystore
    volumes:
      - ./client_properties/project_honeypot.properties:/app/client.properties
      - ./client_properties/log4j2-project_honeypot.xml:/app/log4j2.xml

  collector-geo-asn:
    <<: *java-cpc-collector
    command: [ "--col-geo", "-id", "${ID_PREFIX-domrad}", "-p", "/app/client.properties", "-s", "${BOOTSTRAP_SERVERS:-kafka1:9093}" ]
    secrets:
      - kafka-truststore
      - collector-keystore
    volumes:
      - ./data/geoip/:/app/geoip/
      - ./client_properties/geo_asn.properties:/app/client.properties
      - ./client_properties/log4j2-geo_asn.xml:/app/log4j2.xml

  collector-rdap-dn:
    <<: *python-collector
    image: domrad/rdap-dn
    secrets:
      - ca-cert
      - collector-cert
      - collector-key
    volumes:
      - ./client_properties/rdap_dn.toml:/app/config.toml

  collector-rdap-ip:
    <<: *python-collector
    image: domrad/rdap-ip
    secrets:
      - ca-cert
      - collector-cert
      - collector-key
    volumes:
      - ./client_properties/rdap_ip.toml:/app/config.toml

  collector-rtt:
    <<: *python-collector
    image: domrad/rtt
    secrets:
      - ca-cert
      - collector-cert
      - collector-key
    volumes:
      - ./client_properties/rtt.toml:/app/config.toml
    cap_add:
      - CAP_NET_RAW
      - CAP_NET_ADMIN

  collector-qradar:
    <<: *java-cpc-collector
    command: [ "--col-qradar", "-id", "${ID_PREFIX-domrad}", "-p", "/app/client.properties", "-s", "${BOOTSTRAP_SERVERS:-kafka1:9093}" ]
    secrets:
      - kafka-truststore
      - collector-keystore
    volumes:
      - ./client_properties/qradar.properties:/app/client.properties
      - ./client_properties/log4j2-qradar.xml:/app/log4j2.xml

  # --- Extractor and classifier #

  extractor:
    <<: *scale-extractor
    image: domrad/extractor
    depends_on:
      initializer:
        condition: service_completed_successfully
    restart: always
    secrets:
      - ca-cert
      - extractor-cert
      - extractor-key
    networks:
      - kafka-clients
      - outside-world
    volumes:
      - ./client_properties/extractor.toml:/app/config.toml
      - ./data/extractor/:/app/data/
    env_file: 
      - ./envs/faust.env

  # --- Flink --- #

  fl-jobmanager:
    image: domrad/merger-flink
    depends_on:
      initializer:
        condition: service_completed_successfully
    restart: always
    ports:
     - "31020:8081"
    command: ["standalone-job", "--job-classname", "cz.vut.fit.domainradar.DataStreamJob",
      "--", "/opt/merger-flink.properties"]
    # --fromSavepoint /path/to/savepoint --allowNonRestoredState
    volumes:
      - ./client_properties/merger.properties:/opt/merger-flink.properties
      - flink-data:/flink-data/
      - type: tmpfs
        target: /flink-tmp
        read_only: false
        tmpfs:
          size: "2147483648"
          mode: 0777
    secrets:
      - kafka-truststore
      - merger-keystore
    env_file: ./envs/flink.env
    networks:
      kafka-clients: {}
      outside-world: {}

  fl-taskmanager:
    <<: *scale-taskmanager
    image: domrad/merger-flink
    depends_on:
      - fl-jobmanager
    restart: always
    command: taskmanager
    volumes:
      - ./client_properties/merger.properties:/opt/merger-flink.properties
      - flink-data:/flink-data/
      - type: tmpfs
        target: /flink-tmp
        read_only: false
        tmpfs:
          size: "2147483648"
          mode: 0777
    secrets:
      - kafka-truststore
      - merger-keystore
    env_file: ./envs/flink.env
    networks:
      kafka-clients: {}

volumes:
  kafka1-single-log: {}
  flink-data: {}

networks:
  kafka-clients:
    driver: bridge
    enable_ipv6: false
    # Note: on rootful podman, internal: true breaks DNS
    internal: true
    ipam:
      config:
        - subnet: 192.168.100.0/24
          gateway: 192.168.100.1
          ip_range: 192.168.100.128/25
  databases:
    driver: bridge
    enable_ipv6: false
    # Note: on rootful podman, internal: true breaks DNS
    internal: true
    ipam:
      config:
        - subnet: 192.168.101.0/24
          gateway: 192.168.101.1
          ip_range: 192.168.101.128/25
  collectors:
    driver: bridge
    enable_ipv6: true
    ipam:
      config:
        - subnet: 192.168.102.0/24
          gateway: 192.168.102.1
          ip_range: 192.168.102.128/25
        - subnet: fd10:3456:789a:1::/64
  outside-world:
    driver: bridge
    enable_ipv6: false
    ipam:
      config:
        - subnet: 192.168.103.0/25
          gateway: 192.168.103.1
  kafka-outside-world:
    driver: bridge
    enable_ipv6: false
    ipam:
      config:
        - subnet: 192.168.103.248/29
          gateway: 192.168.103.249

secrets:
  kafka-truststore:
    file: ./secrets/kafka.truststore.jks
  kafka1-keystore:
    file: ./secrets/secrets_kafka1/kafka1.keystore.jks
  ca-cert:
    file: ./secrets/ca/ca-cert

  classifier-unit-cert:
    file: ./secrets/secrets_classifier-unit/classifier-unit-cert.pem
  classifier-unit-key:
    file: ./secrets/secrets_classifier-unit/classifier-unit-priv-key.pem

  config-manager-cert:
    file: ./secrets/secrets_config-manager/config-manager-cert.pem
  config-manager-key:
    file: ./secrets/secrets_config-manager/config-manager-priv-key.pem

  collector-keystore:
    file: ./secrets/secrets_collector/collector.keystore.jks
  collector-cert:
    file: ./secrets/secrets_collector/collector-cert.pem
  collector-key:
    file: ./secrets/secrets_collector/collector-priv-key.pem

  extractor-cert:
    file: ./secrets/secrets_extractor/extractor-cert.pem
  extractor-key:
    file: ./secrets/secrets_extractor/extractor-priv-key.pem

  kafka-connect-keystore:
    file: ./secrets/secrets_kafka-connect/kafka-connect.keystore.jks

  initializer-keystore:
    file: ./secrets/secrets_initializer/initializer.keystore.jks

  kafka-ui-keystore:
    file: ./secrets/secrets_kafka-ui/kafka-ui.keystore.jks

  merger-keystore:
    file: ./secrets/secrets_merger/merger.keystore.jks

  # loader-keystore:
  #   file: ./secrets/secrets_loader/loader.keystore.jks
  # loader-cert:
  #   file: ./secrets/secrets_loader/loader-cert.pem
  # loader-key:
  #   file: ./secrets/secrets_loader/loader-priv-key.pem
